{"name": "test_search_wiki", "status": "broken", "statusDetails": {"message": "TypeError: expected str, bytes or os.PathLike object, not NoneType", "trace": "context = 'bstack'\n\n    @pytest.fixture(scope='function', autouse=True)\n    def android_mobile_management(context):\n>       from config import config\n\nconftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\config.py:8: in <module>\n    class Config(BaseModel):\n..\\config.py:14: in Config\n    app_local: str = file.abs_path_from_project(os.getenv('APP'))\n..\\utils\\file.py:9: in abs_path_from_project\n    .parent.parent.joinpath(relative_path)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py:763: in joinpath\n    return self._make_child(args)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py:531: in _make_child\n    drv, root, parts = self._parse_args(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'pathlib.WindowsPath'>, args = (None,)\n\n    @classmethod\n    def _parse_args(cls, args):\n        # This is useful when you don't want to create an instance, just\n        # canonicalize some constructor arguments.\n        parts = []\n        for a in args:\n            if isinstance(a, PurePath):\n                parts += a._parts\n            else:\n>               a = os.fspath(a)\nE               TypeError: expected str, bytes or os.PathLike object, not NoneType\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pathlib.py:493: TypeError"}, "start": 1705875759150, "stop": 1705875759150, "uuid": "dc5cadbc-0600-463a-aab1-05b2d48ef301", "historyId": "c63294a747b4a633982476baae816e12", "testCaseId": "1d87c46cfa17e00dcac45ae55b88fbfb", "fullName": "mobile.tests.test_search_wiki#test_search_wiki", "labels": [{"name": "parentSuite", "value": "mobile.tests"}, {"name": "suite", "value": "test_search_wiki"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "16184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "mobile.tests.test_search_wiki"}]}